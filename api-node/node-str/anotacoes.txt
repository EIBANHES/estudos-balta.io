Instalação node, npm e vs code:

	- no terminal dentro da pasta digitar node init -y, para configurar toda a aplicação node,
	- criar posteriormente na raiz um arquivo chamado server.js
	- para rodar uma aplicação node é só rodar node server.js


Instalação para criar um servidor HTTP:

	- npm install http express debug --save  -> instala 3 pacotes
	- Debug: Debuga a aplicação;
	- Express: Prove toda parte do MVC,
	- HTTP: Servidor HTTP

Criando um servidor web:
	- importação de modulos:
		const http = require('http');
		const debug = require('debug')('nodestr:server');
		const express = require('express');
	
	- Instanciando a API:
		const app = express();
		const port = 3000;
		app.set('port', port);
		
	- criando um servidor:
		const server = http.createServer(app);
		const router = express.Router();
	
	- Criando uma rota:
		const route = router.get('/', (req, res, next) =>  {
			res.status(200).send({
				title: "Node Store API",
				version: "0.0.1"
			});
		});
		app.use('/', route);
	
	- Ouvir tudo que chega na porta 300:
		server.listen(port);
		console.log('API rodando na porta: '+port);
		
	
Normalizando a porta:

	function normalizePort(val) {
	  const port = parseInt(val, 10);

	  if (isNaN(port)) {
		return val;
	  }
	  if (port >= 0) {
		return port;
	  }
	  return false;
	}
		
		
Tratativa de erro no servidor:
	
	- Tratar erro de permissão ou de porta sendo usada:
		function onError(error){
			if(error.syscall !== 'listen'){
				throw error;
			}
			const bind = typeof port === 'string' ?
				'Pipe ' + port:
				'Port ' + port;

			switch (error.code) {
				case 'EACCES':
					console.error(bind  + ' requires elevated privileges');
					process.exit(1);
					break;
				case 'EADDRINUSE':
					console.error(bind  + ' is already in use');
					process.exit(1);
					break;
			
				default:
					throw error;
			}
		}

Atualizando o packege.json:

	- "test": "echo \"Error: no test specified\" && exit 1" 
		- Replace to:
	- "start": "node ./bin/server.js"
	- Agora para executar uma aplicação só digitar npm start

Nodemon:
	
	- Reseta o servidor automaticamente quando altera algo
	- npm install nodemon --save-dev
	-  { --save-dev }, válido somente para ambiente de produção

Req, res, next

	-> Req -> Requsição;
	-> Res -> Resposta;
	-> Next -> Continuar

Status HTTP:

	-> 200: ok;
	-> 201: created;
	-> 400: bad request;
	-> 401: não autenticado;
	-> 403: acesso negado,
	-> 500: internal server error.

O que precisa para criar uma rota?

	-> Express e router

Body parser

	-> Pacote importante para converter o corpo de uma requisição para o JSON

Estruturação da API:

	-> pasta routes : responsavel por conter todas as rotas da api
	-> pasta controller: faz a manipulação dos dados e dps envia para o user

Para conexão de banco de dados

	-> npm install mongoose --save
